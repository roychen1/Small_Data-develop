'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''

def fibonacci_sequence():
    ''' helper function
        we're hooking you with a partial answer, just this first time! '''
    fib_of_n, fib_of_n_plus1 = 1, 1
    while True:
        fib_of_n, fib_of_n_plus1 = fib_of_n_plus1, fib_of_n + fib_of_n_plus1
        yield fib_of_n

def sum_of_even_valued_fibonacci_not_exceeding(n):
    ''' solution to the module challenge '''
    your_code_here = 0


def test_fibonacci_sequence():
    ''' confirms that the generator output
        matches the number sequence in the problem '''
    fibonacci_generator = fibonacci_sequence()
    assert fibonacci_generator.next() == 1
    assert fibonacci_generator.next() == 2
    assert fibonacci_generator.next() == 3
    assert fibonacci_generator.next() == 5
    assert fibonacci_generator.next() == 8
    assert fibonacci_generator.next() == 13
    assert fibonacci_generator.next() == 21
    assert fibonacci_generator.next() == 34
    assert fibonacci_generator.next() == 55
    assert fibonacci_generator.next() == 89

def test_sum_of_even_valued_fibonacci_not_exceeding_small_n():
    assert (2 + 8 + 34) == sum_of_even_valued_fibonacci_not_exceeding(89)

def test_sum_of_even_valued_fibonacci_not_exceeding():
    assert 4613732 == sum_of_even_valued_fibonacci_not_exceeding(4*10**6)

